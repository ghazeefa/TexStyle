// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TexStyle.Infrastructure;

namespace TexStyle.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TexStyle.Core.Analysis.AnalysisType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("AnalysisType");
                });

            modelBuilder.Entity("TexStyle.Core.Analysis.Defect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Defect");
                });

            modelBuilder.Entity("TexStyle.Core.Analysis.DefectAnalysis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnalysisTypeID");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<long>("DefectId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NoOfDefects");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisTypeID");

                    b.HasIndex("DefectId");

                    b.ToTable("DefectAnalysis");
                });

            modelBuilder.Entity("TexStyle.Core.CS.DyeChemicalTr", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("CableCharges");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("DTRENo");

                    b.Property<decimal?>("DrumCharges");

                    b.Property<long?>("DyeChemicalXrefTrId");

                    b.Property<decimal?>("ElectricityCharges");

                    b.Property<decimal?>("FairPrice");

                    b.Property<long?>("GateTrId");

                    b.Property<long?>("IGPReffNo");

                    b.Property<DateTime?>("InvoiceDate");

                    b.Property<long?>("InvoiceNo");

                    b.Property<bool>("IsCancel");

                    b.Property<bool?>("IsCompleteIssued");

                    b.Property<bool>("IsConfirm");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal?>("LabourCharges");

                    b.Property<long?>("PartyId");

                    b.Property<long?>("RecipeId");

                    b.Property<DateTime?>("RecipieIssuanceDate");

                    b.Property<string>("Remarks");

                    b.Property<long>("Sno");

                    b.Property<long>("TrType");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("DyeChemicalXrefTrId");

                    b.HasIndex("GateTrId");

                    b.HasIndex("PartyId");

                    b.HasIndex("RecipeId");

                    b.ToTable("DyeChemicalTrs");
                });

            modelBuilder.Entity("TexStyle.Core.CS.DyeChemicalTrDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChemicalId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<decimal?>("DrBalance");

                    b.Property<long?>("DrId");

                    b.Property<long?>("DyeChemicalTrId");

                    b.Property<long?>("DyeChemicalXrefDetailTrId");

                    b.Property<long?>("DyeId");

                    b.Property<decimal?>("FinalAmount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal?>("FinalQty")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<long?>("GateTrDetailId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDr");

                    b.Property<bool?>("IsIssued");

                    b.Property<decimal?>("Packet");

                    b.Property<decimal?>("QtyCr")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal?>("QtyDr")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Rate");

                    b.Property<long?>("RecipeDetailId");

                    b.Property<string>("Remarks");

                    b.Property<bool?>("Status");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ChemicalId");

                    b.HasIndex("DyeChemicalTrId");

                    b.HasIndex("DyeChemicalXrefDetailTrId");

                    b.HasIndex("DyeId");

                    b.HasIndex("GateTrDetailId");

                    b.HasIndex("RecipeDetailId");

                    b.ToTable("DyeChemicalTrDetails");
                });

            modelBuilder.Entity("TexStyle.Core.CS.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("TexStyle.Core.Gate.GateActivityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLoanINActivity");

                    b.Property<bool>("IsLoanOutActivity");

                    b.Property<bool>("IsPurchaseActivity");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("GateActivityType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(1016),
                            IsDeleted = false,
                            IsLoanINActivity = false,
                            IsLoanOutActivity = false,
                            IsPurchaseActivity = false,
                            Name = "IGP Yarn"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(3795),
                            IsDeleted = false,
                            IsLoanINActivity = false,
                            IsLoanOutActivity = false,
                            IsPurchaseActivity = false,
                            Name = "OGP Yarn"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(3858),
                            IsDeleted = false,
                            IsLoanINActivity = false,
                            IsLoanOutActivity = false,
                            IsPurchaseActivity = true,
                            Name = "LC IMPORT IN"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(3886),
                            IsDeleted = false,
                            IsLoanINActivity = true,
                            IsLoanOutActivity = false,
                            IsPurchaseActivity = false,
                            Name = "LOAN PARTY RETURN IN"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(3912),
                            IsDeleted = false,
                            IsLoanINActivity = true,
                            IsLoanOutActivity = false,
                            IsPurchaseActivity = false,
                            Name = "LOAN TAKEN IN"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(3988),
                            IsDeleted = false,
                            IsLoanINActivity = false,
                            IsLoanOutActivity = false,
                            IsPurchaseActivity = true,
                            Name = "LOCAL PURCHASE IN"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(4016),
                            IsDeleted = false,
                            IsLoanINActivity = false,
                            IsLoanOutActivity = false,
                            IsPurchaseActivity = false,
                            Name = "INTER UNIT OUT"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(4042),
                            IsDeleted = false,
                            IsLoanINActivity = false,
                            IsLoanOutActivity = true,
                            IsPurchaseActivity = false,
                            Name = "LOAN PARTY GIVEN OUT"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(4067),
                            IsDeleted = false,
                            IsLoanINActivity = false,
                            IsLoanOutActivity = true,
                            IsPurchaseActivity = false,
                            Name = "LOAN TAKEN RETURN OUT"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.Gate.GatePassType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("GatePassType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(6743),
                            IsDeleted = false,
                            Name = "Regular"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(7166),
                            IsDeleted = false,
                            Name = "ReDyeing"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(7211),
                            IsDeleted = false,
                            Name = "After Raising"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(7239),
                            IsDeleted = false,
                            Name = "A"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 218, DateTimeKind.Local).AddTicks(7264),
                            IsDeleted = false,
                            Name = "B"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.Gate.GateTr", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillityNo");

                    b.Property<int?>("BranchId");

                    b.Property<long?>("BuyerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DriverName");

                    b.Property<string>("EmpNo");

                    b.Property<long?>("GateActivityTypeId");

                    b.Property<long?>("GatePassTypeId");

                    b.Property<long?>("GateTrId");

                    b.Property<long?>("GetDyeChemicalTrId");

                    b.Property<long?>("IGPReffNo");

                    b.Property<bool>("IsAfterComercialFinishing");

                    b.Property<bool>("IsAfterFinishing");

                    b.Property<bool>("IsConfirm");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsForComercialFinishing");

                    b.Property<bool>("IsForFinishing");

                    b.Property<bool>("IsReWaxRecheck");

                    b.Property<bool>("IsReprocessed");

                    b.Property<bool>("IsReturnFromParty");

                    b.Property<bool>("IsWithoutOGP");

                    b.Property<bool?>("IsYarn");

                    b.Property<string>("NICNo");

                    b.Property<long?>("OutwardGatePassId");

                    b.Property<long?>("PartyId");

                    b.Property<long>("Sno");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("VehicleNo");

                    b.Property<long>("Xref");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("GateActivityTypeId");

                    b.HasIndex("GatePassTypeId");

                    b.HasIndex("GateTrId");

                    b.HasIndex("GetDyeChemicalTrId");

                    b.HasIndex("OutwardGatePassId");

                    b.HasIndex("PartyId");

                    b.ToTable("GateTrs");
                });

            modelBuilder.Entity("TexStyle.Core.Gate.GateTrDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Bags");

                    b.Property<long?>("BillityNo");

                    b.Property<long?>("ChemicalId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<long?>("DyeChemicalTrDetailId");

                    b.Property<long?>("DyeId");

                    b.Property<long?>("FabricTypeId");

                    b.Property<long?>("GateTrId");

                    b.Property<long?>("GateXrefDetailId");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal?>("NoOfRolls");

                    b.Property<long?>("OGPGateTrDetailId");

                    b.Property<long?>("OutwardGatePassDetailId");

                    b.Property<decimal?>("Packet");

                    b.Property<decimal?>("QtyCr");

                    b.Property<decimal?>("QtyDr");

                    b.Property<decimal?>("Rate");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<long?>("YarnTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ChemicalId");

                    b.HasIndex("DyeChemicalTrDetailId");

                    b.HasIndex("DyeId");

                    b.HasIndex("FabricTypeId");

                    b.HasIndex("GateTrId");

                    b.HasIndex("OGPGateTrDetailId");

                    b.HasIndex("OutwardGatePassDetailId");

                    b.HasIndex("YarnTypeId");

                    b.ToTable("GateTrDetails");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ActivityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("OrderActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 203, DateTimeKind.Local).AddTicks(8708),
                            IsDeleted = false,
                            Name = "Default order type"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.BagMarking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("BagMarkings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 191, DateTimeKind.Local).AddTicks(991),
                            IsDeleted = false,
                            Name = "Red"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.Buyer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<long>("PartyId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Buyers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 200, DateTimeKind.Local).AddTicks(1490),
                            IsDeleted = false,
                            Name = "Some Random Textile",
                            PartyId = 10009L
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.BuyerColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BuyerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("BuyerColors");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BuyerId = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 198, DateTimeKind.Local).AddTicks(8972),
                            IsDeleted = false,
                            Name = "Darker Than Black"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ConeMarking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("ConeMarkings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 195, DateTimeKind.Local).AddTicks(5550),
                            IsDeleted = false,
                            Name = "Khaki"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("PartyId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ContractDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BuyerId");

                    b.Property<long?>("ColorId");

                    b.Property<long?>("ContractId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Quanitity");

                    b.Property<decimal>("Rate");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<long?>("YarnCountId");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ContractId");

                    b.HasIndex("YarnCountId");

                    b.ToTable("ContractDetails");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.FabricQuality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("FabricQualityes");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.FabricTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("FabricTypes");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.FactoryPo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BuyerColorId");

                    b.Property<long?>("BuyerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<long?>("GSM");

                    b.Property<bool>("IsCancel");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("Po");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("BuyerColorId");

                    b.HasIndex("BuyerId");

                    b.ToTable("FactoryPo");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.FactoryPoDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BuyerColorId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<long?>("Dia");

                    b.Property<long?>("FabricQualityId");

                    b.Property<long?>("FabricTypesId");

                    b.Property<long?>("FactoryPoId");

                    b.Property<long?>("GSM");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("NetWeightInKg");

                    b.Property<int>("Sno");

                    b.Property<decimal>("TearWeightInKg");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<long?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("BuyerColorId");

                    b.HasIndex("FabricQualityId");

                    b.HasIndex("FabricTypesId");

                    b.HasIndex("FactoryPoId");

                    b.ToTable("FactoryPoDetail");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.InwardGatePass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActivityTypeId");

                    b.Property<string>("BilityNo");

                    b.Property<int?>("BranchId");

                    b.Property<long?>("BuyerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<long?>("GateReffId");

                    b.Property<long?>("GateTrId");

                    b.Property<DateTime>("IgpDate");

                    b.Property<bool>("IsAfterFinishing");

                    b.Property<bool>("IsCancel");

                    b.Property<bool>("IsConfirm");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsForComercialFinishing");

                    b.Property<bool>("IsForFinishing");

                    b.Property<bool>("IsReWaxRecheck");

                    b.Property<bool>("IsReprocessed");

                    b.Property<bool>("IsReturnToParty");

                    b.Property<bool>("IsReturnfromParty");

                    b.Property<bool>("IsWithoutOGP");

                    b.Property<bool?>("IsYarn");

                    b.Property<long?>("PartyId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("GateTrId");

                    b.HasIndex("PartyId");

                    b.ToTable("InwardGatePasses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityTypeId = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 206, DateTimeKind.Local).AddTicks(7075),
                            IgpDate = new DateTime(2022, 6, 11, 1, 9, 20, 206, DateTimeKind.Local).AddTicks(1312),
                            IsAfterFinishing = false,
                            IsCancel = false,
                            IsConfirm = false,
                            IsDeleted = false,
                            IsForComercialFinishing = false,
                            IsForFinishing = false,
                            IsReWaxRecheck = true,
                            IsReprocessed = false,
                            IsReturnToParty = false,
                            IsReturnfromParty = false,
                            IsWithoutOGP = false,
                            PartyId = 10009L
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.InwardGatePassDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActivityTypeId");

                    b.Property<long?>("BagMarkingId");

                    b.Property<decimal>("Bags");

                    b.Property<string>("BuyerPO");

                    b.Property<long?>("ConeMarkingId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<long?>("Dia");

                    b.Property<long?>("FabricQualityId");

                    b.Property<long?>("FabricTypesId");

                    b.Property<long?>("GSM");

                    b.Property<long?>("InwardGatePassId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsZeroBalance");

                    b.Property<long?>("KnitingPartyId");

                    b.Property<int>("LotNo");

                    b.Property<decimal>("NetWeightInKg");

                    b.Property<decimal?>("NoOfRolls");

                    b.Property<string>("PartyRefNo");

                    b.Property<long?>("RollMarkingId");

                    b.Property<int>("Sno");

                    b.Property<long?>("StoreLocationId");

                    b.Property<decimal>("TearWeightInKg");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<long?>("Weight");

                    b.Property<long?>("YarnManufacturerId");

                    b.Property<long?>("YarnQualityId");

                    b.Property<long?>("YarnTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("BagMarkingId");

                    b.HasIndex("ConeMarkingId");

                    b.HasIndex("FabricQualityId");

                    b.HasIndex("FabricTypesId");

                    b.HasIndex("InwardGatePassId");

                    b.HasIndex("KnitingPartyId");

                    b.HasIndex("RollMarkingId");

                    b.HasIndex("StoreLocationId");

                    b.HasIndex("YarnManufacturerId");

                    b.HasIndex("YarnQualityId");

                    b.HasIndex("YarnTypeId");

                    b.ToTable("InwardGatePassDetails");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BagMarkingId = 1L,
                            Bags = 9m,
                            ConeMarkingId = 1L,
                            Description = "Demo Description",
                            InwardGatePassId = 1L,
                            IsDeleted = false,
                            IsZeroBalance = false,
                            LotNo = 0,
                            NetWeightInKg = 90m,
                            Sno = 0,
                            StoreLocationId = 1L,
                            TearWeightInKg = 90m,
                            YarnManufacturerId = 1L,
                            YarnQualityId = 1L,
                            YarnTypeId = 1L
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.IssueNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("IRNO");

                    b.Property<bool>("IsConfirm");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReprocessed");

                    b.Property<DateTime>("IssueDate");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("IssueNotes");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.IssueNoteDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Bags");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("IssueNoteId");

                    b.Property<decimal>("Kgs");

                    b.Property<long?>("PPCPlanningId");

                    b.Property<long?>("ReprocessId");

                    b.Property<long?>("StoreLocationId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("IssueNoteId");

                    b.HasIndex("PPCPlanningId");

                    b.HasIndex("ReprocessId");

                    b.HasIndex("StoreLocationId");

                    b.ToTable("IssueNoteDetails");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.LotMarking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsIssued");

                    b.Property<DateTime?>("IssuanceDate");

                    b.Property<long>("Kgs");

                    b.Property<decimal>("NoOfRolls");

                    b.Property<long?>("PPCPlanningId");

                    b.Property<decimal>("RollNo");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("PPCPlanningId");

                    b.ToTable("LotMarkings");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.OutwardGatePass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActivityTypeId");

                    b.Property<string>("BilityNo");

                    b.Property<int?>("BranchId");

                    b.Property<long?>("BuyerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<long?>("FabricTypeId");

                    b.Property<string>("IDCard");

                    b.Property<decimal?>("InvoiceAmount");

                    b.Property<string>("InvoiceDescription");

                    b.Property<long?>("InvoiceNo");

                    b.Property<bool>("IsAfterComercialFinishing");

                    b.Property<bool>("IsAfterFinishing");

                    b.Property<bool>("IsCancel");

                    b.Property<bool>("IsConfirm");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsForFinishing");

                    b.Property<bool>("IsReCheck");

                    b.Property<bool>("IsReWaxRecheck");

                    b.Property<bool>("IsReprocessed");

                    b.Property<bool>("IsReturnToParty");

                    b.Property<bool?>("IsYarn");

                    b.Property<int?>("LotNo");

                    b.Property<long?>("OGPReffNO");

                    b.Property<DateTime>("OgpDate");

                    b.Property<long?>("PartyId");

                    b.Property<string>("ReceivingPerson");

                    b.Property<string>("SerialNo");

                    b.Property<decimal?>("TotalWeight");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("VehicleNo");

                    b.Property<long?>("YarnTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("FabricTypeId");

                    b.HasIndex("PartyId");

                    b.HasIndex("YarnTypeId");

                    b.ToTable("OutwardGatePasses");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.OutwardGatePassDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount");

                    b.Property<decimal>("Bags");

                    b.Property<long?>("BuyerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<long?>("FabricTypesId");

                    b.Property<long?>("FactoryPoDetailId");

                    b.Property<long?>("InwardGatePassDetailId");

                    b.Property<bool?>("IsComplete");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Kgs");

                    b.Property<int?>("LotNo");

                    b.Property<decimal?>("NoOfRolls");

                    b.Property<long?>("OutwardGatePassId");

                    b.Property<long?>("PPCPlanningId");

                    b.Property<decimal>("Rate");

                    b.Property<string>("Remarks");

                    b.Property<long?>("ReprocessId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<long?>("YarnTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("FabricTypesId");

                    b.HasIndex("FactoryPoDetailId");

                    b.HasIndex("InwardGatePassDetailId");

                    b.HasIndex("OutwardGatePassId");

                    b.HasIndex("PPCPlanningId");

                    b.HasIndex("ReprocessId");

                    b.HasIndex("YarnTypeId");

                    b.ToTable("OutwardGatePassesDetails");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.PPCPlanning", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<long?>("BuyerColorId");

                    b.Property<long?>("BuyerId");

                    b.Property<int>("Cones");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<long?>("Dia");

                    b.Property<long?>("FabricQualityId");

                    b.Property<long?>("FabricTypeId");

                    b.Property<long?>("FabricTypesId");

                    b.Property<long?>("GSM");

                    b.Property<long?>("InwardGatePassDetailId");

                    b.Property<bool?>("IsCancel");

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsYarn");

                    b.Property<DateTime>("IssuedDate");

                    b.Property<decimal>("Kgs");

                    b.Property<long?>("KnitingPartyId");

                    b.Property<int>("LotNo");

                    b.Property<decimal?>("NoOfRolls");

                    b.Property<long?>("PartyId");

                    b.Property<string>("PartyPONo");

                    b.Property<long?>("ProductionTypeId");

                    b.Property<long?>("PurchaseOrderId");

                    b.Property<string>("Remarks");

                    b.Property<string>("StyleNo");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int?>("UserId");

                    b.Property<long?>("Weight");

                    b.Property<long?>("YarnManufacturerId");

                    b.Property<long?>("YarnQualityId");

                    b.Property<long?>("YarnTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BuyerColorId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("FabricQualityId");

                    b.HasIndex("FabricTypeId");

                    b.HasIndex("FabricTypesId");

                    b.HasIndex("InwardGatePassDetailId");

                    b.HasIndex("KnitingPartyId");

                    b.HasIndex("PartyId");

                    b.HasIndex("ProductionTypeId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("YarnManufacturerId");

                    b.HasIndex("YarnQualityId");

                    b.HasIndex("YarnTypeId");

                    b.ToTable("PPCPlannings");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.Party", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ControlAccount");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHeader");

                    b.Property<string>("Name");

                    b.Property<long>("SubAccount");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Parties");

                    b.HasData(
                        new
                        {
                            Id = 10009L,
                            ControlAccount = 10000L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 201, DateTimeKind.Local).AddTicks(2984),
                            IsDeleted = false,
                            IsHeader = false,
                            Name = "It's Party In the House.",
                            SubAccount = 0L
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ProductionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("ProductionType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 197, DateTimeKind.Local).AddTicks(5866),
                            IsDeleted = false,
                            Name = "Sample"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 198, DateTimeKind.Local).AddTicks(4048),
                            IsDeleted = false,
                            Name = "Production"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.PurchaseOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<long?>("BuyerColorId");

                    b.Property<long?>("BuyerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<long?>("FabricQualityId");

                    b.Property<long?>("FabricTypeId");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsYarn");

                    b.Property<long?>("PartyId");

                    b.Property<long?>("PartyId1");

                    b.Property<long>("Po");

                    b.Property<long?>("SeasonId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int?>("UserId");

                    b.Property<long?>("YarnQualityId");

                    b.Property<long?>("YarnTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BuyerColorId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("FabricQualityId");

                    b.HasIndex("FabricTypeId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PartyId1");

                    b.HasIndex("SeasonId");

                    b.HasIndex("UserId");

                    b.HasIndex("YarnQualityId");

                    b.HasIndex("YarnTypeId");

                    b.ToTable("PurchaseOrders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BuyerColorId = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 203, DateTimeKind.Local).AddTicks(3273),
                            IsClosed = false,
                            IsDeleted = false,
                            Po = 0L,
                            SeasonId = 1L,
                            YarnQualityId = 1L,
                            YarnTypeId = 1L
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ReportFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AnalysisTypeId");

                    b.Property<int?>("BranchId");

                    b.Property<long?>("BuyerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DateFrom");

                    b.Property<DateTime?>("DateTo");

                    b.Property<long?>("FabricQualityId");

                    b.Property<long?>("FabricTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsYarn");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int?>("UserId");

                    b.Property<long?>("YarnPartyId");

                    b.Property<long?>("YarnQualityId");

                    b.Property<long?>("YarnTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("FabricQualityId");

                    b.HasIndex("FabricTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("YarnPartyId");

                    b.HasIndex("YarnQualityId");

                    b.HasIndex("YarnTypeId");

                    b.ToTable("ReportFilters");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.Reprocess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cones");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<long?>("InwardGatePassDetailId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsYarn");

                    b.Property<decimal>("Kgs");

                    b.Property<int?>("NoOfRolls");

                    b.Property<long?>("PPCPlanningId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("InwardGatePassDetailId");

                    b.HasIndex("PPCPlanningId");

                    b.ToTable("Reprocesses");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ReturnNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<long?>("BuyerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsConfirm");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReprocessed");

                    b.Property<bool?>("IsYarn");

                    b.Property<int?>("LotNo");

                    b.Property<DateTime>("ReturnDate");

                    b.Property<decimal?>("TotalWeight");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("UserId");

                    b.ToTable("ReturnNotes");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ReturnNoteDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Bags");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<decimal?>("EcruKgs");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Kgs");

                    b.Property<decimal?>("NoOfRolls");

                    b.Property<long?>("PPCPlanningId");

                    b.Property<long?>("ReceivedQualityStatus");

                    b.Property<long?>("ReprocessId");

                    b.Property<long>("ReturnNoteId");

                    b.Property<string>("Status");

                    b.Property<long?>("StoreLocationId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("PPCPlanningId");

                    b.HasIndex("ReprocessId");

                    b.HasIndex("ReturnNoteId");

                    b.HasIndex("StoreLocationId");

                    b.ToTable("ReturnNoteDetails");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.RollMarking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("NoOfRolls");

                    b.Property<long?>("PPCPlanningId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("PPCPlanningId");

                    b.ToTable("RollMarkings");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.RollMarkingDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<long>("DyedKgs");

                    b.Property<long>("EcruKgs");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("RollMarkingId");

                    b.Property<decimal>("RollNo");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("RollMarkingId");

                    b.ToTable("RollMarkingDetails");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Seasons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 202, DateTimeKind.Local).AddTicks(26),
                            IsDeleted = false,
                            Name = "Winter"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.StoreLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("StoreLocations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 205, DateTimeKind.Local).AddTicks(3082),
                            IsDeleted = false,
                            Name = "R1"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.SubActivityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActivityTypeId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.ToTable("SubProcessActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityTypeId = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 204, DateTimeKind.Local).AddTicks(7026),
                            IsDeleted = false,
                            Name = "Default sub process type"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.YarnManufacturer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("YarnManufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 196, DateTimeKind.Local).AddTicks(2060),
                            IsDeleted = false,
                            Name = "Default Manufacturer"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.YarnQuality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("YarnQualities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 197, DateTimeKind.Local).AddTicks(2032),
                            IsDeleted = false,
                            Name = "Grey"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.YarnType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("YarnTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 196, DateTimeKind.Local).AddTicks(6190),
                            IsDeleted = false,
                            Name = "12/s"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.PPC.knittingParty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("knittingPartyes");
                });

            modelBuilder.Entity("TexStyle.Core.Premisis.Branches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("TexStyle.Core.YD.Chemical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<decimal>("Rate");

                    b.Property<bool?>("Selected");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Chemicals");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 211, DateTimeKind.Local).AddTicks(5413),
                            IsDeleted = false,
                            Name = "D CM",
                            Rate = 1m
                        });
                });

            modelBuilder.Entity("TexStyle.Core.YD.Costing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<double>("Electricity");

                    b.Property<double>("ExportQuantity");

                    b.Property<double>("FurnaceCharges");

                    b.Property<double>("Gas");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("MIS");

                    b.Property<double>("SalaryAndWage");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Costings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 212, DateTimeKind.Local).AddTicks(9671),
                            Date = new DateTime(2022, 6, 11, 1, 9, 20, 211, DateTimeKind.Local).AddTicks(9292),
                            Electricity = 1.0,
                            ExportQuantity = 1.0,
                            FurnaceCharges = 1.0,
                            Gas = 1.0,
                            IsDeleted = false,
                            MIS = 1.0,
                            SalaryAndWage = 1.0
                        });
                });

            modelBuilder.Entity("TexStyle.Core.YD.Dye", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<decimal>("Rate");

                    b.Property<bool?>("Selected");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Dyes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 210, DateTimeKind.Local).AddTicks(7703),
                            IsDeleted = false,
                            Name = "D D",
                            Rate = 1m
                        });
                });

            modelBuilder.Entity("TexStyle.Core.YD.Machine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Chambers");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("MachineTypeId");

                    b.Property<int>("ReelSpeed");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeId");

                    b.ToTable("Machines");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Chambers = 1,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 209, DateTimeKind.Local).AddTicks(4927),
                            IsDeleted = false,
                            MachineTypeId = 1L,
                            ReelSpeed = 1
                        });
                });

            modelBuilder.Entity("TexStyle.Core.YD.MachineType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Capacity");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("MachineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 208, DateTimeKind.Local).AddTicks(8486),
                            IsDeleted = false,
                            Name = "D MT"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.YD.ProcessType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("ProcessTypees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 208, DateTimeKind.Local).AddTicks(5504),
                            IsDeleted = false,
                            Name = "D PT"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.YD.Recipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<long?>("BuyerColorId");

                    b.Property<string>("Color");

                    b.Property<int>("Cones");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReprocessed");

                    b.Property<bool?>("IsWithoutLPS");

                    b.Property<bool?>("IsYarn");

                    b.Property<decimal>("LiquorRate");

                    b.Property<int?>("LotNo");

                    b.Property<long?>("MachineTypeId");

                    b.Property<decimal>("No");

                    b.Property<long?>("PartyId");

                    b.Property<long?>("RecipeFormatId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int?>("UserId");

                    b.Property<decimal>("Weight");

                    b.Property<decimal>("XRefRecipe");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BuyerColorId");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("PartyId");

                    b.HasIndex("RecipeFormatId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cones = 0,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 215, DateTimeKind.Local).AddTicks(9503),
                            Date = new DateTime(2022, 6, 11, 1, 9, 20, 215, DateTimeKind.Local).AddTicks(8630),
                            IsConfirmed = false,
                            IsDeleted = false,
                            IsReprocessed = false,
                            LiquorRate = 1m,
                            MachineTypeId = 1L,
                            No = 0m,
                            RecipeFormatId = 1L,
                            Weight = 0m,
                            XRefRecipe = 0m
                        });
                });

            modelBuilder.Entity("TexStyle.Core.YD.RecipeDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChemicalId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<long?>("DyeId");

                    b.Property<decimal>("Gpl")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("LotNo");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<long?>("RecipeId");

                    b.Property<long?>("RecipeStepId");

                    b.Property<long>("Sno");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("ChemicalId");

                    b.HasIndex("DyeId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("RecipeStepId");

                    b.ToTable("RecipeDetails");
                });

            modelBuilder.Entity("TexStyle.Core.YD.RecipeFormatDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChemicalId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<long?>("DyeId");

                    b.Property<decimal>("Gpl")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<long?>("RecipeFormatHeaderId");

                    b.Property<long?>("RecipeStepId");

                    b.Property<long>("Sno");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ChemicalId");

                    b.HasIndex("DyeId");

                    b.HasIndex("RecipeFormatHeaderId");

                    b.HasIndex("RecipeStepId");

                    b.ToTable("RecipeFormatDetails");
                });

            modelBuilder.Entity("TexStyle.Core.YD.RecipeFormatHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsYarn");

                    b.Property<decimal>("LiquorRate");

                    b.Property<string>("Name");

                    b.Property<long?>("ProcessTypeId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ProcessTypeId");

                    b.ToTable("RecipeFormatHeaders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 214, DateTimeKind.Local).AddTicks(9318),
                            IsDeleted = false,
                            IsYarn = false,
                            LiquorRate = 1m,
                            Name = "D F",
                            ProcessTypeId = 1L
                        });
                });

            modelBuilder.Entity("TexStyle.Core.YD.RecipeLPS", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("LPSId");

                    b.Property<long>("RecipeId");

                    b.Property<long?>("ReprocessId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("LPSId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("ReprocessId");

                    b.ToTable("RecipeLPs");
                });

            modelBuilder.Entity("TexStyle.Core.YD.RecipeStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("RecipeSteps");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2022, 6, 11, 1, 9, 20, 210, DateTimeKind.Local).AddTicks(254),
                            IsDeleted = false,
                            Name = "D STEP"
                        });
                });

            modelBuilder.Entity("TexStyle.Core.YD.Sticker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cons");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("LPSId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Sticker");
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("BranchId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool?>("IsYarn");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("ReportFilterId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ReportFilterId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b89497e4-d019-4855-b2a4-160f90f745ff",
                            Email = "developer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECqMQJEOa6rYu/KAFqrTgdlBfVGTalH502NFdybd/AYzSB4UKe2jUQiHh7ExeGJGyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3caaa674-fd7a-41c6-82fe-2e190f51a43f",
                            TwoFactorEnabled = false,
                            UserName = "fatima"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7381f024-689a-4bf2-97c0-a8765f2653e4",
                            Email = "developer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECqMQJEOa6rYu/KAFqrTgdlBfVGTalH502NFdybd/AYzSB4UKe2jUQiHh7ExeGJGyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3caaa674-fd7a-41c6-82fe-2e190f51a43f",
                            TwoFactorEnabled = false,
                            UserName = "developer"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc0c1f79-5e1a-4083-9223-81ef148d7c3f",
                            Email = "admintexstyle@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECqMQJEOa6rYu/KAFqrTgdlBfVGTalH502NFdybd/AYzSB4UKe2jUQiHh7ExeGJGyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3caaa674-fd7a-41c6-82fe-2e190f51a43f",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "610d817f-6971-4fbc-90ee-738ca8a2a26f",
                            Email = "ppcuser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECqMQJEOa6rYu/KAFqrTgdlBfVGTalH502NFdybd/AYzSB4UKe2jUQiHh7ExeGJGyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3caaa674-fd7a-41c6-82fe-2e190f51a43f",
                            TwoFactorEnabled = false,
                            UserName = "ppcuser"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52b91c7e-22c6-4476-aad6-7a4146e07519",
                            Email = "yduser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECqMQJEOa6rYu/KAFqrTgdlBfVGTalH502NFdybd/AYzSB4UKe2jUQiHh7ExeGJGyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3caaa674-fd7a-41c6-82fe-2e190f51a43f",
                            TwoFactorEnabled = false,
                            UserName = "yduser"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d27f6906-b0d3-45f2-8c14-d68af23a4bde",
                            Email = "csuser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECqMQJEOa6rYu/KAFqrTgdlBfVGTalH502NFdybd/AYzSB4UKe2jUQiHh7ExeGJGyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3caaa674-fd7a-41c6-82fe-2e190f51a43f",
                            TwoFactorEnabled = false,
                            UserName = "csuser"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11da5042-2b1d-4bcc-94b2-83cecaf20c7e",
                            Email = "gateuser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECqMQJEOa6rYu/KAFqrTgdlBfVGTalH502NFdybd/AYzSB4UKe2jUQiHh7ExeGJGyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3caaa674-fd7a-41c6-82fe-2e190f51a43f",
                            TwoFactorEnabled = false,
                            UserName = "gateuser"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "239231d0-7694-4bf2-ae34-40ce6286af0b",
                            Email = "marketingaccountsuser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECqMQJEOa6rYu/KAFqrTgdlBfVGTalH502NFdybd/AYzSB4UKe2jUQiHh7ExeGJGyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3caaa674-fd7a-41c6-82fe-2e190f51a43f",
                            TwoFactorEnabled = false,
                            UserName = "marketingaccountuser"
                        });
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AccountRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "b753abeb-4778-4f83-9b0e-5fc92f3cde23",
                            Name = "Developer"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "71d14195-0124-4286-8779-9595ac6d5c4b",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "d781c39d-7e69-4c94-b3f3-fa6b505df6aa",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "8c98f02c-ee46-48d0-9e6b-32b4a587bd12",
                            Name = "PPC User"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "a4f17da9-1e6f-4226-b47b-700f9deddff3",
                            Name = "YD User"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "01842182-4309-4c95-bdbc-ae87b57b54a1",
                            Name = "CS User"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "6aa0445f-8f47-43e0-8a26-74021e949072",
                            Name = "Gate User"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = "607d0008-9ec6-4cf5-88a3-fbdbc2b12ac4",
                            Name = "Marketing Accounts User"
                        });
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleId1");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("AccountRoleClaims");
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AccountUserClaims");
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserId1");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AccountUserLogins");
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleId1");

                    b.Property<int?>("UserId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AccountUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 7
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 8
                        });
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountUserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<int?>("UserId1");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("UserId1");

                    b.ToTable("AccountUserTokens");
                });

            modelBuilder.Entity("TexStyle.Core.Analysis.DefectAnalysis", b =>
                {
                    b.HasOne("TexStyle.Core.Analysis.AnalysisType", "AnalysisType")
                        .WithMany()
                        .HasForeignKey("AnalysisTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexStyle.Core.Analysis.Defect", "Defect")
                        .WithMany()
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TexStyle.Core.CS.DyeChemicalTr", b =>
                {
                    b.HasOne("TexStyle.Core.CS.DyeChemicalTr", "DyeChemicalXrefTr")
                        .WithMany()
                        .HasForeignKey("DyeChemicalXrefTrId");

                    b.HasOne("TexStyle.Core.Gate.GateTr", "GateTr")
                        .WithMany()
                        .HasForeignKey("GateTrId");

                    b.HasOne("TexStyle.Core.PPC.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("TexStyle.Core.YD.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("TexStyle.Core.CS.DyeChemicalTrDetail", b =>
                {
                    b.HasOne("TexStyle.Core.YD.Chemical", "Chemical")
                        .WithMany()
                        .HasForeignKey("ChemicalId");

                    b.HasOne("TexStyle.Core.CS.DyeChemicalTr", "DyeChemicalTrs")
                        .WithMany("DyeChemicalTrDetails")
                        .HasForeignKey("DyeChemicalTrId");

                    b.HasOne("TexStyle.Core.CS.DyeChemicalTrDetail", "DyeChemicalXrefDetailTr")
                        .WithMany()
                        .HasForeignKey("DyeChemicalXrefDetailTrId");

                    b.HasOne("TexStyle.Core.YD.Dye", "Dye")
                        .WithMany()
                        .HasForeignKey("DyeId");

                    b.HasOne("TexStyle.Core.Gate.GateTrDetail", "GateTrDetail")
                        .WithMany()
                        .HasForeignKey("GateTrDetailId");

                    b.HasOne("TexStyle.Core.YD.RecipeDetail", "RecipeDetail")
                        .WithMany()
                        .HasForeignKey("RecipeDetailId");
                });

            modelBuilder.Entity("TexStyle.Core.Gate.GateTr", b =>
                {
                    b.HasOne("TexStyle.Core.Premisis.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("TexStyle.Core.PPC.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("TexStyle.Core.Gate.GateActivityType", "GateActivityType")
                        .WithMany()
                        .HasForeignKey("GateActivityTypeId");

                    b.HasOne("TexStyle.Core.Gate.GatePassType", "GatePassType")
                        .WithMany()
                        .HasForeignKey("GatePassTypeId");

                    b.HasOne("TexStyle.Core.Gate.GateTr", "GateTrs")
                        .WithMany()
                        .HasForeignKey("GateTrId");

                    b.HasOne("TexStyle.Core.CS.DyeChemicalTr", "GetDyeChemicalTr")
                        .WithMany()
                        .HasForeignKey("GetDyeChemicalTrId");

                    b.HasOne("TexStyle.Core.PPC.OutwardGatePass", "OutwardGatePass")
                        .WithMany()
                        .HasForeignKey("OutwardGatePassId");

                    b.HasOne("TexStyle.Core.PPC.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");
                });

            modelBuilder.Entity("TexStyle.Core.Gate.GateTrDetail", b =>
                {
                    b.HasOne("TexStyle.Core.YD.Chemical", "Chemical")
                        .WithMany()
                        .HasForeignKey("ChemicalId");

                    b.HasOne("TexStyle.Core.CS.DyeChemicalTrDetail", "DyeChemicalTrDetail")
                        .WithMany()
                        .HasForeignKey("DyeChemicalTrDetailId");

                    b.HasOne("TexStyle.Core.YD.Dye", "Dye")
                        .WithMany()
                        .HasForeignKey("DyeId");

                    b.HasOne("TexStyle.Core.PPC.FabricTypes", "FabricTypes")
                        .WithMany()
                        .HasForeignKey("FabricTypeId");

                    b.HasOne("TexStyle.Core.Gate.GateTr", "GateTr")
                        .WithMany("GateTrDetails")
                        .HasForeignKey("GateTrId");

                    b.HasOne("TexStyle.Core.Gate.GateTrDetail", "OGPGateTrDetail")
                        .WithMany()
                        .HasForeignKey("OGPGateTrDetailId");

                    b.HasOne("TexStyle.Core.PPC.OutwardGatePassDetail", "OutwardGatePassDetail")
                        .WithMany()
                        .HasForeignKey("OutwardGatePassDetailId");

                    b.HasOne("TexStyle.Core.PPC.YarnType", "YarnType")
                        .WithMany()
                        .HasForeignKey("YarnTypeId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.Buyer", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.Party", "Party")
                        .WithMany("Buyers")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TexStyle.Core.PPC.BuyerColor", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.Buyer", "Buyer")
                        .WithMany("BuyerColors")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TexStyle.Core.PPC.Contract", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ContractDetail", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("TexStyle.Core.PPC.BuyerColor", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("TexStyle.Core.PPC.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("TexStyle.Core.PPC.YarnType", "YarnType")
                        .WithMany()
                        .HasForeignKey("YarnCountId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.FactoryPo", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.BuyerColor", "BuyerColor")
                        .WithMany()
                        .HasForeignKey("BuyerColorId");

                    b.HasOne("TexStyle.Core.PPC.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.FactoryPoDetail", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.BuyerColor", "BuyerColor")
                        .WithMany()
                        .HasForeignKey("BuyerColorId");

                    b.HasOne("TexStyle.Core.PPC.FabricQuality", "FabricQuality")
                        .WithMany()
                        .HasForeignKey("FabricQualityId");

                    b.HasOne("TexStyle.Core.PPC.FabricTypes", "FabricTypes")
                        .WithMany()
                        .HasForeignKey("FabricTypesId");

                    b.HasOne("TexStyle.Core.PPC.FactoryPo", "FactoryPo")
                        .WithMany("FactoryPoDetail")
                        .HasForeignKey("FactoryPoId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.InwardGatePass", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("TexStyle.Core.Premisis.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("TexStyle.Core.PPC.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("TexStyle.Core.Gate.GateTr", "GateTr")
                        .WithMany()
                        .HasForeignKey("GateTrId");

                    b.HasOne("TexStyle.Core.PPC.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.InwardGatePassDetail", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("TexStyle.Core.PPC.BagMarking", "BagMarking")
                        .WithMany()
                        .HasForeignKey("BagMarkingId");

                    b.HasOne("TexStyle.Core.PPC.ConeMarking", "ConeMarking")
                        .WithMany()
                        .HasForeignKey("ConeMarkingId");

                    b.HasOne("TexStyle.Core.PPC.FabricQuality", "FabricQuality")
                        .WithMany()
                        .HasForeignKey("FabricQualityId");

                    b.HasOne("TexStyle.Core.PPC.FabricTypes", "FabricTypes")
                        .WithMany()
                        .HasForeignKey("FabricTypesId");

                    b.HasOne("TexStyle.Core.PPC.InwardGatePass", "InwardGatePass")
                        .WithMany("InwardGatePassDetails")
                        .HasForeignKey("InwardGatePassId");

                    b.HasOne("TexStyle.Core.PPC.knittingParty", "knittingParty")
                        .WithMany()
                        .HasForeignKey("KnitingPartyId");

                    b.HasOne("TexStyle.Core.PPC.RollMarking", "RollMarking")
                        .WithMany()
                        .HasForeignKey("RollMarkingId");

                    b.HasOne("TexStyle.Core.PPC.StoreLocation", "StoreLocation")
                        .WithMany()
                        .HasForeignKey("StoreLocationId");

                    b.HasOne("TexStyle.Core.PPC.YarnManufacturer", "YarnManufacturer")
                        .WithMany()
                        .HasForeignKey("YarnManufacturerId");

                    b.HasOne("TexStyle.Core.PPC.YarnQuality", "YarnQuality")
                        .WithMany()
                        .HasForeignKey("YarnQualityId");

                    b.HasOne("TexStyle.Core.PPC.YarnType", "YarnType")
                        .WithMany()
                        .HasForeignKey("YarnTypeId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.IssueNote", b =>
                {
                    b.HasOne("TexStyle.Core.Premisis.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account", "Account")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.IssueNoteDetail", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.IssueNote", "IssueNote")
                        .WithMany("IssueNoteDetail")
                        .HasForeignKey("IssueNoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexStyle.Core.PPC.PPCPlanning", "PPCPlanning")
                        .WithMany()
                        .HasForeignKey("PPCPlanningId");

                    b.HasOne("TexStyle.Core.PPC.Reprocess", "Reprocess")
                        .WithMany()
                        .HasForeignKey("ReprocessId");

                    b.HasOne("TexStyle.Core.PPC.StoreLocation", "StoreLocation")
                        .WithMany()
                        .HasForeignKey("StoreLocationId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.LotMarking", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.PPCPlanning", "PPCPlanning")
                        .WithMany()
                        .HasForeignKey("PPCPlanningId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.OutwardGatePass", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("TexStyle.Core.Premisis.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("TexStyle.Core.PPC.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("TexStyle.Core.PPC.FabricTypes", "FabricTypes")
                        .WithMany()
                        .HasForeignKey("FabricTypeId");

                    b.HasOne("TexStyle.Core.PPC.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("TexStyle.Core.PPC.YarnType", "YarnType")
                        .WithMany()
                        .HasForeignKey("YarnTypeId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.OutwardGatePassDetail", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("TexStyle.Core.PPC.FabricTypes", "FabricTypes")
                        .WithMany()
                        .HasForeignKey("FabricTypesId");

                    b.HasOne("TexStyle.Core.PPC.FactoryPoDetail", "FactoryPoDetail")
                        .WithMany()
                        .HasForeignKey("FactoryPoDetailId");

                    b.HasOne("TexStyle.Core.PPC.InwardGatePassDetail", "InwardGatePassDetail")
                        .WithMany()
                        .HasForeignKey("InwardGatePassDetailId");

                    b.HasOne("TexStyle.Core.PPC.OutwardGatePass", "OutwardGatePass")
                        .WithMany("OutwardGatePassDetails")
                        .HasForeignKey("OutwardGatePassId");

                    b.HasOne("TexStyle.Core.PPC.PPCPlanning", "PPCPlanning")
                        .WithMany()
                        .HasForeignKey("PPCPlanningId");

                    b.HasOne("TexStyle.Core.PPC.Reprocess", "Reprocess")
                        .WithMany()
                        .HasForeignKey("ReprocessId");

                    b.HasOne("TexStyle.Core.PPC.YarnType", "YarnType")
                        .WithMany()
                        .HasForeignKey("YarnTypeId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.PPCPlanning", b =>
                {
                    b.HasOne("TexStyle.Core.Premisis.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("TexStyle.Core.PPC.BuyerColor", "BuyerColor")
                        .WithMany()
                        .HasForeignKey("BuyerColorId");

                    b.HasOne("TexStyle.Core.PPC.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("TexStyle.Core.PPC.FabricQuality", "FabricQuality")
                        .WithMany()
                        .HasForeignKey("FabricQualityId");

                    b.HasOne("TexStyle.Core.PPC.FabricTypes", "FabricTypes")
                        .WithMany()
                        .HasForeignKey("FabricTypeId");

                    b.HasOne("TexStyle.Core.PPC.FabricTypes", "FabricType")
                        .WithMany()
                        .HasForeignKey("FabricTypesId");

                    b.HasOne("TexStyle.Core.PPC.InwardGatePassDetail", "InwardGatePassDetail")
                        .WithMany()
                        .HasForeignKey("InwardGatePassDetailId");

                    b.HasOne("TexStyle.Core.PPC.knittingParty", "knittingParty")
                        .WithMany()
                        .HasForeignKey("KnitingPartyId");

                    b.HasOne("TexStyle.Core.PPC.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("TexStyle.Core.PPC.ProductionType", "ProductionType")
                        .WithMany()
                        .HasForeignKey("ProductionTypeId");

                    b.HasOne("TexStyle.Core.PPC.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account", "Account")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("TexStyle.Core.PPC.YarnManufacturer", "YarnManufacturer")
                        .WithMany()
                        .HasForeignKey("YarnManufacturerId");

                    b.HasOne("TexStyle.Core.PPC.YarnQuality", "YarnQuality")
                        .WithMany()
                        .HasForeignKey("YarnQualityId");

                    b.HasOne("TexStyle.Core.PPC.YarnType", "YarnType")
                        .WithMany()
                        .HasForeignKey("YarnTypeId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.PurchaseOrder", b =>
                {
                    b.HasOne("TexStyle.Core.Premisis.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("TexStyle.Core.PPC.BuyerColor", "BuyerColor")
                        .WithMany()
                        .HasForeignKey("BuyerColorId");

                    b.HasOne("TexStyle.Core.PPC.Buyer")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("BuyerId");

                    b.HasOne("TexStyle.Core.PPC.FabricQuality", "FabricQuality")
                        .WithMany()
                        .HasForeignKey("FabricQualityId");

                    b.HasOne("TexStyle.Core.PPC.FabricTypes", "FabricTypes")
                        .WithMany()
                        .HasForeignKey("FabricTypeId");

                    b.HasOne("TexStyle.Core.PPC.Party")
                        .WithMany("PurchaseOrder")
                        .HasForeignKey("PartyId");

                    b.HasOne("TexStyle.Core.PPC.Party")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PartyId1");

                    b.HasOne("TexStyle.Core.PPC.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account", "Account")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("TexStyle.Core.PPC.YarnQuality", "YarnQuality")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("YarnQualityId");

                    b.HasOne("TexStyle.Core.PPC.YarnType", "YarnType")
                        .WithMany()
                        .HasForeignKey("YarnTypeId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ReportFilter", b =>
                {
                    b.HasOne("TexStyle.Core.Premisis.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("TexStyle.Core.PPC.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("TexStyle.Core.PPC.FabricQuality", "FabricQuality")
                        .WithMany()
                        .HasForeignKey("FabricQualityId");

                    b.HasOne("TexStyle.Core.PPC.FabricTypes", "FabricTypes")
                        .WithMany()
                        .HasForeignKey("FabricTypeId");

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("TexStyle.Core.PPC.Party", "YarnParty")
                        .WithMany()
                        .HasForeignKey("YarnPartyId");

                    b.HasOne("TexStyle.Core.PPC.YarnQuality", "YarnQuality")
                        .WithMany()
                        .HasForeignKey("YarnQualityId");

                    b.HasOne("TexStyle.Core.PPC.YarnType", "YarnType")
                        .WithMany()
                        .HasForeignKey("YarnTypeId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.Reprocess", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.InwardGatePassDetail", "InwardGatePassDetail")
                        .WithMany()
                        .HasForeignKey("InwardGatePassDetailId");

                    b.HasOne("TexStyle.Core.PPC.PPCPlanning", "PPCPlanning")
                        .WithMany("Reprocesses")
                        .HasForeignKey("PPCPlanningId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ReturnNote", b =>
                {
                    b.HasOne("TexStyle.Core.Premisis.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("TexStyle.Core.PPC.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account", "Account")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.ReturnNoteDetail", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.PPCPlanning", "PPCPlanning")
                        .WithMany()
                        .HasForeignKey("PPCPlanningId");

                    b.HasOne("TexStyle.Core.PPC.Reprocess", "Reprocess")
                        .WithMany()
                        .HasForeignKey("ReprocessId");

                    b.HasOne("TexStyle.Core.PPC.ReturnNote", "ReturnNote")
                        .WithMany("ReturnNoteDetails")
                        .HasForeignKey("ReturnNoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexStyle.Core.PPC.StoreLocation", "StoreLocation")
                        .WithMany()
                        .HasForeignKey("StoreLocationId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.RollMarking", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.PPCPlanning", "PPCPlanning")
                        .WithMany()
                        .HasForeignKey("PPCPlanningId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.RollMarkingDetail", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.RollMarking", "RollMarking")
                        .WithMany("RollMarkingDetails")
                        .HasForeignKey("RollMarkingId");
                });

            modelBuilder.Entity("TexStyle.Core.PPC.SubActivityType", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");
                });

            modelBuilder.Entity("TexStyle.Core.YD.Machine", b =>
                {
                    b.HasOne("TexStyle.Core.YD.MachineType", "MachineType")
                        .WithMany()
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TexStyle.Core.YD.Recipe", b =>
                {
                    b.HasOne("TexStyle.Core.Premisis.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("TexStyle.Core.PPC.BuyerColor", "BuyerColor")
                        .WithMany()
                        .HasForeignKey("BuyerColorId");

                    b.HasOne("TexStyle.Core.YD.MachineType", "MachineType")
                        .WithMany()
                        .HasForeignKey("MachineTypeId");

                    b.HasOne("TexStyle.Core.PPC.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("TexStyle.Core.YD.RecipeFormatHeader", "RecipeFormat")
                        .WithMany()
                        .HasForeignKey("RecipeFormatId");

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TexStyle.Core.YD.RecipeDetail", b =>
                {
                    b.HasOne("TexStyle.Core.YD.Chemical", "Chemical")
                        .WithMany()
                        .HasForeignKey("ChemicalId");

                    b.HasOne("TexStyle.Core.YD.Dye", "Dye")
                        .WithMany()
                        .HasForeignKey("DyeId");

                    b.HasOne("TexStyle.Core.YD.Recipe", "Recipe")
                        .WithMany("RecipeDetails")
                        .HasForeignKey("RecipeId");

                    b.HasOne("TexStyle.Core.YD.RecipeStep", "RecipeStep")
                        .WithMany()
                        .HasForeignKey("RecipeStepId");
                });

            modelBuilder.Entity("TexStyle.Core.YD.RecipeFormatDetail", b =>
                {
                    b.HasOne("TexStyle.Core.YD.Chemical", "Chemical")
                        .WithMany()
                        .HasForeignKey("ChemicalId");

                    b.HasOne("TexStyle.Core.YD.Dye", "Dye")
                        .WithMany()
                        .HasForeignKey("DyeId");

                    b.HasOne("TexStyle.Core.YD.RecipeFormatHeader", "RecipeFormatHeader")
                        .WithMany("RecipeFormatDetails")
                        .HasForeignKey("RecipeFormatHeaderId");

                    b.HasOne("TexStyle.Core.YD.RecipeStep", "RecipeStep")
                        .WithMany()
                        .HasForeignKey("RecipeStepId");
                });

            modelBuilder.Entity("TexStyle.Core.YD.RecipeFormatHeader", b =>
                {
                    b.HasOne("TexStyle.Core.YD.ProcessType", "ProcessType")
                        .WithMany()
                        .HasForeignKey("ProcessTypeId");
                });

            modelBuilder.Entity("TexStyle.Core.YD.RecipeLPS", b =>
                {
                    b.HasOne("TexStyle.Core.PPC.PPCPlanning", "LPS")
                        .WithMany()
                        .HasForeignKey("LPSId");

                    b.HasOne("TexStyle.Core.YD.Recipe", "Recipe")
                        .WithMany("RecipeLPs")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexStyle.Core.PPC.Reprocess", "Reprocess")
                        .WithMany()
                        .HasForeignKey("ReprocessId");
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.Account", b =>
                {
                    b.HasOne("TexStyle.Core.Premisis.Branches", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("TexStyle.Core.PPC.ReportFilter", "ReportFilter")
                        .WithMany()
                        .HasForeignKey("ReportFilterId");
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountRoleClaim", b =>
                {
                    b.HasOne("TexStyle.Identity.Extensions.DTO.AccountRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexStyle.Identity.Extensions.DTO.AccountRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId1");
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountUserClaim", b =>
                {
                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountUserLogin", b =>
                {
                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountUserRole", b =>
                {
                    b.HasOne("TexStyle.Identity.Extensions.DTO.AccountRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexStyle.Identity.Extensions.DTO.AccountRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("TexStyle.Identity.Extensions.DTO.AccountUserToken", b =>
                {
                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TexStyle.Identity.Extensions.DTO.Account", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
